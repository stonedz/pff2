<?php

use PHPUnit\Framework\TestCase;

/**
 * Test class for App.
 *
 * Generated by PHPUnit on 2012-03-04 at 11:37:03.
 */
class AppTest extends TestCase
{
    /**
     * @var \pff\App
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $conf = new \pff\Config('config.user.php', 'tests/assets');
        $mm = $this->getMockBuilder('\pff\Core\ModuleManager')
                                ->disableOriginalConstructor()
                                ->disableOriginalClone()
                                ->disableArgumentCloning()
                                ->disallowMockingUnknownTypes()
                                ->getMock();
        $hookm = $this->getMockBuilder('\pff\Core\HookManager')
                                ->disableOriginalConstructor()
                                ->disableOriginalClone()
                                ->disableArgumentCloning()
                                ->disallowMockingUnknownTypes()
                                ->getMock();
        $hm = $this->getMockBuilder('\pff\Core\HelperManager')
                                ->disableOriginalConstructor()
                                ->disableOriginalClone()
                                ->disableArgumentCloning()
                                ->disallowMockingUnknownTypes()
                                ->getMock();


        //$moduleManager = $this->getMock('\\pff\\Core\\ModuleManager', array(), array($conf));
        //$hookManager   = $this->getMock('\\pff\\Core\\HookManager', array(), array($conf));
        $this->object  = new \pff\App($conf, $hookm, $mm, $hm);
        $this->object->setUrl('one/two/three');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @return void
     */
    protected function tearDown(): void
    {
    }

    public function testGetUrl()
    {
        $this->assertEquals('one/two/three', $this->object->getUrl());
    }


    /**
     * Tests the setting of a user defined route.
     *
     * @covers \pff\App
     * @return void
     */
    public function testSetRoutes()
    {
        $this->assertEmpty($this->object->getRoutes());
        $this->object->addRoute('test', 'test');
        $tmp = $this->object->getRoutes();
        $this->assertArrayHasKey('test', $tmp);
        $this->assertEquals('test', $tmp['test']);
    }

    /**
     * @covers \pff\App
     */
    public function testApplyRouting()
    {
        $this->object->addRoute('test', 'test');
        $tmpReq = 'test';
        $this->assertTrue($this->object->applyRouting($tmpReq));
        $this->assertEquals($tmpReq, 'Test_Controller');
    }

    /**
     * Fails the addition to a static route that points to a non existant file
     *
     * @covers \pff\App
     * @covers \pff\Exception\RoutingException
     * @return void
     */
    public function testSetRoutesFails()
    {
        $this->expectException('\\pff\\Exception\\RoutingException');
        $this->object->addRoute('test', 'testNOTController');
    }

    /**
     * Tests the setting of a user defined route.
     *
     * @covers \pff\App::addStaticRoute
     * @covers \pff\App::getStaticRoutes
     * @return void
     */
    public function testSetStaticRoutes()
    {
        $this->assertEmpty($this->object->getStaticRoutes());
        $this->object->addStaticRoute('test', 'testPage.php');
        $tmp = $this->object->getStaticRoutes();
        $this->assertArrayHasKey('test', $tmp);
        $this->assertEquals('testPage.php', $tmp['test']);
    }

    /**
     * @covers \pff\App::applyStaticRouting
     */
    public function testApplyStaticRouting()
    {
        $this->object->addStaticRoute('test', 'testPage.php');
        $tmpReq = 'test';
        $this->assertTrue($this->object->applyStaticRouting($tmpReq));
        $this->assertEquals($tmpReq, 'app' . DS . 'pages' . DS . 'testPage.php');
    }

    /**
     * Fails the addition to a static route that points to a non existant file
     *
     * @return void
     */
    public function testSetStaticRoutesFails()
    {
        $this->expectException('\\pff\\Exception\\RoutingException');
        $this->object->addStaticRoute('test', 'testNOTPage.php');
    }

    public function testApplyStaticRoutesFailsWithInvalidRoute()
    {
        $tmp = 'NO_I_DO_NOT_EXIST';
        $this->assertFalse($this->object->applyStaticRouting($tmp));
    }

    public function testApplyRoutesFailsWithInvalidRoute()
    {
        $tmp = 'NO_I_DO_NOT_EXIST';
        $this->assertFalse($this->object->applyRouting($tmp));
    }

    public function testRunFailsWithInvalidController()
    {
        $this->expectException('\\pff\\Exception\\RoutingException');
        $this->object->run();
    }
}
