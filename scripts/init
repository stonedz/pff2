#!/bin/bash
green='\e[0;32m'
GREEN='\e[1;32m'
red='\e[0;31m'
RED='\e[1;31m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
NC='\e[0m' # No Color

function help() {
    echo -e "${NC}-f    Force the update";
}

echo -e "${GREEN}========== \n${BLUE} pf${RED}f${GREEN}2 ${BLUE}init \n${GREEN}=========="

# Gets the parameters
while getopts ":f" opt; do
    case $opt in
        f)
            force=true
            echo -e "${red}Force update!"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            echo -e "\n"
            help
            exit
            ;;
    esac
done


# command line dependecies"
#CMDS="curl"
PKGS=""
#######################################
# START
#######################################
fail=false

# CHECK FOR DEPENDECIES PACKAGES
echo -ne "${CYAN}Checking required packages..."
for p in $PKGS
do
PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $p |grep "install ok installed")
if [ "" == "$PKG_OK" ]
then
     echo -e "${RED} Package ${p} is required, please install it. Rememeber to restart Apache afterwards!${NC}"
     exit 1
fi
done
echo -e "${GREEN} [OK]"


# GENERATE app FOLDER
echo -ne "\n${CYAN}Initializing app..."
tmp=`pwd`
if [ ! -d "app" ]
then
    cp -r vendor/stonedz/pff2/resources/app_skeleton app/
    git init . &> /dev/null
    echo -e "${GREEN}[OK]"
else
    echo -e "${GREEN}[OK]${NC} (app/ folder already present)"
fi
cd $tmp


# GENERATE tmp FOLDER
echo -ne "\n${CYAN}Creating tmp directory..."
tmp=`pwd`
if [ ! -d "tmp" ]
then
    mkdir tmp
    echo -e "${GREEN}[OK]"
else
    echo -e "${GREEN}[OK]${NC} (tmp/ folder already present)"
fi
cd $tmp

# GENERATE proxy FOLDER
echo -ne "\n${CYAN}Creating proxy directory..."
tmp=`pwd`
if [ ! -d "app/proxies" ]
then
    mkdir app/proxies
    chmod 777 app/proxies
    echo -e "${GREEN}[OK]"
else
    echo -e "${GREEN}[OK]${NC} (app/proxies folder already present)"
fi
cd $tmp
#Generate autoload files
#if ! command -v phpab &> /dev/null
#then
#    echo -e "\n${RED}[FAIL] Phpab command not found! install with the following commands \n
#     pear channel-discover pear.netpirates.net \n
#     pear channel-discover components.ez.no \n
#     pear install theseer/Autoload"
#    fail=true
#else
#    echo -ne "\n${CYAN}Generating autoload.php files..."
#    sh vendor/bin/generateAutoload.sh &> /dev/null
#    echo -e "${GREEN}[OK]"
#fi

#Creating symlinks
echo -ne "\n${CYAN}Moving css and js files"
tmp=`pwd`
cd vendor
cd components/normalize.css
cp normalize.css ${tmp}/app/public/css
echo -e "${GREEN}[OK]"
cd ${tmp}

#Creating .htaccess
#echo -ne "\n${CYAN}Generating htaccess file"
cp vendor/stonedz/pff2/public/.htaccess .
#echo -e "${GREEN}[OK]"

#Creating cli-config for doctrine
echo -ne "\n${CYAN}Copying cli-config for doctrine"
cp vendor/stonedz/pff2/scripts/cli-config.php .
echo -e "${GREEN}[OK]"

#Copying .gitignore file
echo -ne "\n${CYAN}Copying site skel"
cp vendor/stonedz/pff2/resources/site_skeleton/.gitignore .
cp vendor/stonedz/pff2/resources/site_skeleton/index.php .
cp vendor/stonedz/pff2/resources/site_skeleton/docker-compose.yml .
cd vendor/stonedz/pff2/resources/site_skeleton
mkdir tmp
cp -r deployement/nginx/dev-nginx.conf ../../../../..
cd ../../../../..
echo -e "${GREEN}[OK]"

#Copying build files
echo -ne "\n${CYAN}Copying ld related files"
cp vendor/stonedz/pff2/phpdox.xml.dist .
cp vendor/stonedz/pff2/build.xml .

if [ ! -d "build" ]
then
mkdir build
fi

echo -e "${GREEN}[OK]"

# Final message
if [ "$fail" == "false" ]
then
    echo -e "\n${NC}Everything should be in place :D Have fun!"
else
    echo -e "\n${red}Something went wrong!${NC}"
fi
